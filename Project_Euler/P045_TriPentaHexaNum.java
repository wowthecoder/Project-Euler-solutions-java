//Problem 45: Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

//Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
//Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
//Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
//It can be verified that T285 = P165 = H143 = 40755.

//Find the next triangle number that is also pentagonal and hexagonal.

//The first thing to note is that the set of hexagonal numbers 
//is a subset of triangle numbers if we substitute n = 2m – 1 
//into the triangle number equation we get

//T_n = (2m -1)((2m-1) 1)/2 = (2m-1)2m/2 = m(2m-1)

//Which indeed is the formula for hexagonal numbers. That means all 
//triangular number based on an odd n is a hexagonal numbers.

class TriPentaHexaNum {
	public static void main(String[] args){
		long startTime = System.nanoTime();
		long n = 144;
		while (true) {
			long hexagonal = (n * (2*n - 1));
			if (isPentagonal(hexagonal)) {
				System.out.println(hexagonal);
				break;
			}
			n++;
		}
		long endTime = System.nanoTime();
		long timeElapsed = endTime - startTime;
		System.out.println(timeElapsed/1000000 + " ms");
	}
	
	static boolean isPentagonal(long number) {
		//see if number fits into n(3n-1)
		number *= 2;
		/*for (long i = 1; i <= (long)Math.sqrt(number); i++) {
			if (number % i == 0) {
				if (number / i == (i*3-1))
					return true;
			}
		}*/
		//completing the square for the function 3n^2 - n, get 3(n-1/6)^2-1/12
		//inverse the function, get sqrt((12x+1)/36)+1/6
		long numer = number*12 + 1;
		double sqrtDenom = 6.0;
		double sqrtNumer = Math.sqrt(numer);
		if ((long)sqrtNumer != sqrtNumer)
			return false;
		double finalNum = (double)((long)sqrtNumer + 1) / sqrtDenom;
		if ((long)finalNum == finalNum)
			return true;
		return false;
	}
}
